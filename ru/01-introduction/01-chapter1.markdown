# Введение #

Эта глава о том, как начать работу с Git. Сначала мы объясним основы инструментов управления версиями, затем — как запустить Git на вашей машине, и, наконец, как настроить его, чтобы можно было работать. К концу главы вы будете понимать, для чего Git вообще сделан, почему вам следует пользоваться им, и сможете настраивать его.

## Об управлении версиями ##

Что такое управление версиями, и какое вам до него дело? Управление версиями — это система, сохраняющая изменения, сделанные в файле или в нескольких файлах, чтобы потом можно было получить доступ к предыдущим версиям. Для примеров в этой книге взяты файлы с исходными кодами программ, но в действительности можно управлять версиями практически любых типов файлов.

Если вы графический или веб-дизайнер и хотите хранить каждую версию изображения или макета — а вы скорее всего захотите — то пользоваться системой управления версиями (СУВ) будет очень мудрым решением. Она позволяет вернуть файлы к прежнему виду, вернуть к прежнему состоянию весь проект, сравнить сделанные изменения, увидеть, кто последним менял то, что, вероятно, является причиной сбоя, кто создал проблему и так далее. Использование СУВ также обычно предполагает, что если вы испортили или потеряли файлы, их можно легко восстановить. Кроме того, издержки на всё это будут очень маленькими.

### Локальные системы управления версиями ###

Многие люди, чтобы управлять версиями, просто копируют файлы в другую папку (умные также пишут текущую дату в название папки). Такой подход очень распространён, ибо прост, но он легко может дать сбой. Вы можете попросту забыть, в какой папке вы находитесь, и случайно изменить не тот файл или перезаписать при копировании не те файлы.

Чтобы решить эту проблему, программисты давным-давно разработали локальные СУВ с простой базой данных, которая хранит все изменения заданных файлов (см. рисунок 1-1).

Insert 18333fig0101.png 
Рисунок 1-1. Схема локальной СУВ

Одной из наиболее популярных СУВ данного типа является rcs, которая до сих пор устанавливается на многие компьютеры. Даже в современной операционной системе Mac OS X утилита rcs устанавливается вместе с Developer Tools. Эта утилита основана на хранении наборов патчей между каждыми двумя последовательными версиями (патч - файл, описывающий различие между файлами) в специальном формате на диске. Это позволяет восстановить состояние любого файла на любой момент времени, последовательно накладывая патчи.

### Централизованные системы управления версиями ###

Следующей большой проблемой оказалась необходимость сотрудничать с разработчиками за другими компьютерами. Чтобы решить её, были созданы централизованные системы управления версиями (ЦСУВ). В состав таких систем (например, CVS, Subversion и Perforce) входит центральный сервер, в котором хранятся все отслеживаемые файлы, и ряд клиентов, которые получают копии файлов из него. На протяжении многих лет это являлось стандартом управления версиями (см. рис. 1-2).

Insert 18333fig0102.png 
Рисунок 1-2. Схема централизованного управления версиями

Такой подход имеет множество преимуществ, особенно по сравнению с локальными СУВ. К примеру, все знают, кто чем занят в рамках проекта. Администраторы обладают чётким контролем над тем, кто и что может делать, и, конечно, администрировать ЦСУВ гораздо легче, чем локальные базы данных на каждом клиенте.

Однако такой подход содержит в себе и серьёзные недостатки. Наиболее очевидный недостаток — централизованный сервер является уязвимым местом всей системы. Если сервер выключается на час, то в течение часа разработчики не могут взаимодействовать, и никто не может сохранить новые версии файлов, находящихся в работе. Если же повреждается диск с центральной базой данных и нет резервной копии, вы теряете абсолютно всё  — всю историю проекта, за исключением разве что нескольких рабочих версий, сохранившихся на компьютерах пользователей. Локальные системы управления версиями подвержены той же проблеме — если вся история проекта хранится в одном месте, вы рискуете потерять всё.

### Распределённые системы контроля версий ###

Здесь и вступают в игру распределенные системы управления версиями (РСУВ). В таких системах, как Git, Mercurial, Bazaar или Darcs, клиенты не просто забирают последние версии файлов, а полностью копируют репозиторий. Поэтому в случае, когда "умирает" сервер, через который шла работа, любой клиентский репозиторий может быть скопирован обратно на сервер, чтобы восстановить базу данных. Всякий раз, когда клиент забирает свежую версию файлов, создаётся полная копия всех данных (см. рисунок 1-3).

Insert 18333fig0103.png 
Рисунок 1-3. Схема распределенной системы управления версиями

Кроме того, многие из этих систем позволяют работать с несколькими удаленными репозиториями, таким образом, можно одновременно работать по-разному с разными группами людей в рамках одного проекта. Так, в одном проекте можно одновременно иметь несколько разных рабочих процессов, что в централизованных системах невозможно.

## Краткая история Git ##

Как и многие замечательные вещи, в некотором роде, Git начинался с отказа от имеющихся решений и жарких споров. Ядро Linux — проект с открытым исходным кодом, имеющий довольно большой размер. На протяжении бо́льшей части существования ядра Linux (1991-2002) изменения и обновления передавались в форме патчей и архивов. В 2002 г. проект стал использовать проприетарную РСУВ BitKeeper.

В 2005 г. отношения между сообществом разработчиков ядра Linux и коммерческой компанией-владельцем BitKeeper испортились, и право бесплатного использования продукта было отменено. Это подтолкнуло разработчиков Linux (и, в частности, Линуса Торвальдса, создателя Linux) к разработке собственной системы, основываясь на опыте, полученном за время использования BitKeeper. Основные требования к новой системе были следующими:

*	Скорость
*	Простота дизайна
*	Поддержка нелинейной разработки (тысячи параллельных веток)
*	Полная распределенность
*	Возможность эффективной работы с такими большими проектами, как ядро Linux (как по скорости, так и по размеру данных)

С момента рождения в 2005 г. Git развивался в сторону простоты в использовании, сохраняя свои первоначальные качества. Он невероятно быстр, весьма эффективен для больших проектов, а также обладает превосходной системой ветвления для нелинейной разработки (см. главу 3).

## Основы Git ##

Так что же такое Git в двух словах? Эту часть важно усвоить, поскольку если вы поймете, что такое Git, и каковы принципы его работы, вам будет гораздо проще пользоваться им эффективно. Изучая Git, постарайтесь освободиться от всего, что вы знали о других СУВ, таких как Subversion или Perforce. В Git совсем другие понятия об информации и работа с ней, чем в других системах, хотя пользовательский интерфейс очень похож. Знание этих различий, защитит вас от путаницы при пользовании Git.

### Слепки вместо патчей ###

Главное отличие Git от любых других СУВ (например, Subversion и ей подобных) заключается в понятии о данных. В принципе, большинство других систем хранит информацию как список изменений (патчей) файлов. Эти системы (CVS, Subversion, Perforce, Bazaar и другие) относятся к хранимым данным как к набору файлов и изменениям в каждом из них во времени, как показано на рисунке 1-4.

Insert 18333fig0104.png 
Рисунок 1-4. Другие системы хранят данные как изменения к базовой версии для каждого файла.

Git хранит данные другим способом. Вместо этого Git считает хранимые данные набором слепков небольшой файловой системы. Каждый раз когда вы фиксируете текущую версию проекта, Git по сути сохраняет слепок того, как выгядят все файлы проекта на текущий момент. Ради эффективности, если файл не менялся, Git не сохраняет файл снова, а делает ссылку на ранее сохранённый файл. Подход Git к хранению данных приблизительно показан на рисунке 1-5. 

Insert 18333fig0105.png 
Рисунок 1-5. Git хранит данные как слепки состояний проекта во времени.

Это важное отличие Git от практически всех других систем управления версиями. Поэтому Git пересматривает практически все аспекты управления версиями, которые другие системы взяли от своих предшественниц. Git больше похож на небольшую файловую систему с невероятно мощными инструментами работающими поверх неё, чем на просто СУВ. В главе 3, коснувшись работы с ветвями в Git, мы узнаем, какие преимущества даёт такое понимание данных.

### Почти все операции - локальные ###

Для совершения большинства операций в Git необходимы только локальные файлы и ресурсы, т.е. обычно информация с других компьютеров в сети не нужна. Если вы пользовались централизованными системами, где практически на каждую операцию накладывается сетевая задержка, возможно, подумаете, что боги наделили Git неземной силой. Поскольку вся история проекта хранится локально у вас на диске, большинство операций выглядят практически мгновенными.

К примеру, чтобы показать историю проекта, Git-у не нужно скачивать её с сервера, он просто читает её прямо из вашего локального репозитория. Поэтому историю вы увидите практически мгновенно. Если вам нужно просмотреть изменения между текущей версией файла и версией, сделанной месяц назад, Git может взять файл месячной давности и вычислить разницу на месте, вместо того чтоб запрашивать разницу у сервера СУВ или качать с него старую версию файла и делать локальное сравнение.

Также работа локально означает, что мало чего нельзя сделать без доступа к Сети или VPN. Если вы в самолете или в поезде и хотите немного поработать, можно спокойно сохранять новые версии и загрузить их, когда будет доступна сеть. Если вы пришли домой, а VPN клиент не работает, всё равно можно продолжать работать. Во многих других системах это невозможно, или же крайне неудобно. Например, используя Perforce, вы мало чего можете сделать без соединения с сервером. Работая с Subversion и CVS, вы можете редактировать файлы, но сохранить изменения в вашу базу данных нельзя (потому что она отключена от репозитория). Вроде ничего серьёзного, но потом вы удивитесь, насколько это меняет дело.

### Git следит за целостностью данных ###

Перед сохранением любого файла Git вычисляет контрольную сумму, и она становится индексом этого файла. Поэтому невозможно изменить содержимое файла или папки, и Git не узнал бы об этом. Эта функциональность внедрена в самом фундаменте Git и является важной составляющей его философии. Если информация потеряется при передаче или повредится на диске, Git всегда это выявит.

Механизм, используемый Git для вычисления контрольных сумм, называется хэш SHA-1. Это шестнадцатиричное число (0-9 и a-f) длиной 40 знаков, оно вычисляется на основе содержимого файла или структуры папки, хранимой Git. Хэш SHA-1 выглядит примерно так: 

	24b9da6552252987aa493b52f8696cd6d3b00373

Работая с Git, вы будете постоянно встречать эти хэши, поскольку они широко используются. Фактически, в своей базе данных Git сохраняет всё не по именам файлам, а по хэшам их содержимого.

### Чаще всего данные в Git только добавляются ###

Практически все действия, которые вы совершаете в Git, только добавляют данные в базу. Очень сложно заставить систему удалить данные или сделать что-то неотменяемое. Можно, как и в любой другой СУВ, потерять данные, которые вы ещё не сохранили, но как только они зафиксированы, их очень сложно потерять, особенно если вы регулярно отправляете изменения в другой репозиторий.

Поэтому пользоваться Git - удовольствие, потому что можно экспериментировать, не боясь серьёзно что-то поломать. Чтобы детальнее узнать, как Git хранит данные, и как восстановить то, что кажется уже потерянным, читайте раздел "Под капотом" в главе 9.

### Три состояния ###

Теперь внимание. Самое важное, что нужно помнить про Git, если вы хотите, чтобы дальше изучение шло гладко. В Git файлы могут находиться в одном из трёх состояний: зафиксированные, изменённые и подготовленные. "Зафиксированный" значит, что файл уже сохранён в вашей локальной базе. К изменённым относятся файлы, которые поменялись, но ещё не были зафиксированы. Подготовленные файлы – это изменённые файлы, отмеченные для включения в следующий коммит.

Таким образом, в проекте с использованием Git есть три части: каталог Git (Git directory), рабочая папка (working directory) и область подготовленных файлов (staging area).

Insert 18333fig0106.png 
Рисунок 1-6. Рабочий каталог, область подготовленных файлов, каталог Git.

Папка Git – это место, где Git хранит метаданные и базу данных объектов вашего проекта. Это наиболее важная часть Git, и именно она копируется, когда вы клонируете репозиторий с другого компьютера.

Рабочая директория — это извлеченная из базы копия определённой версии проекта. Эти файлы, взятые из сжатой базы данных в папке Git и помещённые на диск, чтобы просматривать и редактировать их.

Область подготовленных файлов — это обычный файл, обычно хранящийся в папке Git, который содержит информацию о том, что должно войти в следующий коммит. Иногда его называют индексом (index), но последнее время становится стандартом называть ее областью подготовленных фалов (staging area).

Стандартный рабочий процесс с использованием Git выглядит примерно так:

1.	Вы изменяете файлы в вашей рабочей папке.
2.	Вы подготавливаете файлы, добавляя их слепки в область подготовленых файлов.
3.	Вы делаете коммит, при этом слепки из области подготовленных файлов сохраняются в каталог Git.

Если рабочая версия файла совпадает с версией в каталоге Git, файл считается зафиксированным. Если файл изменён, но добавлен в область подготовленных данных, он подготовлен. Если же файл изменился после выгрузки из БД, но не был подготовлен, то он считается изменённым. В главе 2 вы узнаете больше об этих трёх состояниях и как можно либо воспользоваться этим, либо пропускать стадию подготовки.

## Установка Git ##

Настало время немного ознакомиться с использованием Git. Первое, что вам необходимо сделать – установить его. Есть несколько способов сделать это; два основных ― установка из исходников и установка собранного пакета для вашей платформы.

Let’s get into using some Git. First things first—you have to install it. You can get it a number of ways; the two major ones are to install it from source or to install an existing package for your platform.

### Установка из исходников ###

Установка из исходного кода обычно лучше, поскольку вы получаете самую свежую версию. Каждая новая версия Git обычно включает полезные улучшения интерфейса, поэтому установка последней версии - часто лучший выбор, если конечно вас не затрудняет установка программ из исходников. Это также правильный выбор, поскольку многие дистрибутивы Linux содержат очень старые пакеты, поэтому если вы не используете очень свежий дистрибутив или , установка из исходников лучше.

If you can, it’s generally useful to install Git from source, because you’ll get the most recent version. Each version of Git tends to include useful UI enhancements, so getting the latest version is often the best route if you feel comfortable compiling software from source. It is also the case that many Linux distributions contain very old packages; so unless you’re on a very up-to-date distro or are using backports, installing from source may be the best bet.

Для установки Git вам понадобятся библиотеки, от которых Git зависит: curl, zlib, openssl, expat, and libiconv. Например, если в вашей системе менеджер пакетов - yum (Fedora), или apt-get (Debian, Ubuntu), можно воспользоваться следующими командами, чтобы разрешить все зависимости:

	$ yum install curl-devel expat-devel gettext-devel \
	  openssl-devel zlib-devel

	$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \
	  libz-dev 
	
Установив все требуемые библиотеки, можно идти дальше и скачать последнюю версию с сайта Git:

	http://git-scm.com/download
	
Теперь скомпилируйте и установите:

	$ tar -zxf git-1.6.0.5.tar.gz
	$ cd git-1.6.0.5
	$ make prefix=/usr/local all
	$ sudo make prefix=/usr/local install

После этого можно скачать при помощи Git его же исходный код, чтобы получать обновления:

	$ git clone git://git.kernel.org/pub/scm/git/git.git
	
### Установка в Linux ###

Если вы хотите установить Git под Linux как бинарный пакет, вы можете это сделать, используя утилиту для управления пакетами, входящую в ваш дистрибутив. Если вы используете Fedora, вы можете воспользоваться yum:

If you want to install Git on Linux via a binary installer, you can generally do so through the basic package-management tool that comes with your distribution. If you’re on Fedora, you can use yum:

	$ yum install git-core

Если же у вас дистрибутив основанный на Debian, например Ubuntu, попробуйте apt-get:

Or if you’re on a Debian-based distribution like Ubuntu, try apt-get:

	$ apt-get install git-core

### Установка на Mac ###

Есть два простых способа установить Git на Mac. Более простой ― использовать графический инсталлятор Git, который вы можете скачать со страницы Google Code (см. рисунок 1-7):

There are two easy ways to install Git on a Mac. The easiest is to use the graphical Git installer, which you can download from the Google Code page (see Рисунок 1-7):

	http://code.google.com/p/git-osx-installer

Insert 18333fig0107.png 
Рисунок 1-7. Инсталлятор Git под OS X.

Другой распространенный способ установка Git через MacPorts (`http://www.macports.org`). Если у вас установлены MacPorts, инсталлируйте Git так:

The other major way is to install Git via MacPorts (`http://www.macports.org`). If you have MacPorts installed, install Git via

	$ sudo port install git-core +svn +doc +bash_completion +gitweb

Вы не обязаны включать все дополнения, но возможно вы захотите включить +svn в случае, если вам нужно использовать Git совместно с репозиториями Subversion (см. главу 8).

You don’t have to add all the extras, but you’ll probably want to include +svn in case you ever have to use Git with Subversion repositories (see Chapter 8).

### Установка в Windows ###

Установка Git в Windows очень проста. Проект msysGit предлагает очень простую процедуру установки. Просто скачайте exe файл инсталлятора со страницы Google Code и запустите его:

Installing Git on Windows is very easy. The msysGit project has one of the easier installation procedures. Simply download the installer exe file from the Google Code page, and run it:

	http://code.google.com/p/msysgit

После установки у вас будет как консольная версия (включающая SSH-клиент, который пригодится позднее), так и стандартная графическая.

After it’s installed, you have both a command-line version (including an SSH client that will come in handy later) and the standard GUI.

## Первоначальная настройка Git ##

Теперь, когда Git установлен в вашей системе, вам нужно настроить некоторые параметры Git. Это нужно сделать только один раз ― при обновлении настройки сохраняются. Но вы можете их поменять в любой момент выполнив те же команды снова.

Now that you have Git on your system, you’ll want to do a few things to customize your Git environment. You should have to do these things only once; they’ll stick around between upgrades. You can also change them at any time by running through the commands again.

В состав Git входит утилита git config которая позволяет вам просматривать и устанавливать параметры, котролирующие все аспекты работы и внешнего вида Git. Эти параметры могут быть сохранены в трех местах:

Git comes with a tool called git config that lets you get and set configuration variables that control all aspects of how Git looks and operates. These variables can be stored in three different places:

*	файл `/etc/gitconfig`. Содержит переменные общие для всех пользователей вашей системы и всех их репозиториев. Если вы указываете параметр `--system`, запуская `git config`, то параметры читаются и сохраняются в этот файл.
*	файл `~/.gitconfig`. Хранит настройки конкретного пользователя. Этот файл использутеся при указании параметра `--global`.
*	конфигурационный файл в каталоге Git (`.git/config`) используемого репозитория. Содержит параметры, используемые только при работе с данным репозиторием. Каждый более конкретный файл настроек имеет более высокий приоритет, чем файл предыдущего уровня, т.е. значения в `.git/config` перекрывают соответствующие значения в `/etc/gitconfig`.

*	`/etc/gitconfig` file: Contains values for every user on the system and all their repositories. If you pass the option` --system` to `git config`, it reads and writes from this file specifically. 
*	`~/.gitconfig` file: Specific to your user. You can make Git read and write to this file specifically by passing the `--global` option. 
*	config file in the git directory (that is, `.git/config`) of whatever repository you’re currently using: Specific to that single repository. Each level overrides values in the previous level, so values in `.git/config` trump those in `/etc/gitconfig`.

В системах семейства Windows, файл `.gitconfig` хранится в каталоге $HOME (`C:\Documents and Settings\$USER` для большенства пользователей). Кроме того Git ищет файл /etc/gitconfig относительно корневого каталога MSys, который вы указали в инсталляторе Git во время установки.

On Windows systems, Git looks for the `.gitconfig` file in the `$HOME` directory (`C:\Documents and Settings\$USER` for most people). It also still looks for /etc/gitconfig, although it’s relative to the MSys root, which is wherever you decide to install Git on your Windows system when you run the installer.

### Имя пользователя ###

Первое, что вам следует сделать после установки Git ― указать ваше имя и адрес электронной почты. Это важно, потому что каждый коммит в Git содержит эту информацию, и она включена в коммиты, отправляемые вами:

The first thing you should do when you install Git is to set your user name and e-mail address. This is important because every Git commit uses this information, and it’s immutably baked into the commits you pass around:

	$ git config --global user.name "John Doe"
	$ git config --global user.email johndoe@example.com

Повторюсь, что эти настройки нужно сделать один раз, если вы указываете параметр `--global`, поскольку в этом случае Git будет использовать эти данные для всего, что вы делаете в этой системе. Если вы хотите указать другое имя или электронную почту для конкретных проектов, можно выполнить команду без параметра `--global` в папке с нужным проектом.

Again, you need to do this only once if you pass the `--global` option, because then Git will always use that information for anything you do on that system. If you want to override this with a different name or e-mail address for specific projects, you can run the command without the `--global` option when you’re in that project.

### Выбор редактора ###

Теперь, когда вы указали свое имя, вы можете выбрать редактор по умолчанию, который будет использоваться, когда необходимо ввести сообщение в Git. По умолчанию Git использует стандартный редактор вашей системы, обычно это Vi или Vim. Если вы хотите использовать другой текстовый редактор, например Emacs, можно сделать следующее:

	$ git config --global core.editor emacs
	
### Утилита сравнения ###

Другая полезная настройка, которая может вам понадобиться ― встроенная утилита сравнения, которая будет использоваться для разрешения конфликтов слияния. Например, если вы хотите использовать vimdiff:

	$ git config --global merge.tool vimdiff

Git умеет делать слияния при помощи kdiff3, tkdiff, meld, xxdiff, emerge, vimdiff, gvimdiff, ecmerge и opendiff, но вы можете настроить и другую утилиту. Подробнее об этом написано в главе 7.

### Проверка настроек ###

Если вы хотите проверить используемые настройки, можете использовать команду `git config --list`, чтобы показать все, которые Git найдёт:

	$ git config --list
	user.name=Scott Chacon
	user.email=schacon@gmail.com
	color.status=auto
	color.branch=auto
	color.interactive=auto
	color.diff=auto
	...

Некоторые ключи (названия) настроек могут появиться несколько раз, потому что Git читает один и тот же ключ их из разных файлов (например из `/etc/gitconfig` и `~/.gitconfig`). В этом случае Git использует последнее значение для каждого ключа.

Также вы можете проверить значение конкретного ключа, выполнив `git config {ключ}`:

	$ git config user.name
	Scott Chacon

## Как получить помощь? ##

Если вам нужна помощь при использовании Git, есть три способа открыть страницу руководства по любой команде Git:

	$ git help <verb>
	$ git <verb> --help
	$ man git-<verb>

Например, можно открыть руководство по команде config, выполнив команду:

	$ git help config

Эти команды также хороши тем, что вы всегда можете ими воспользоваться, даже без подключения к сети.
Если руководства и этой книги недостаточно, и вам нужна персональная помощь, вы можете попытаться поискать её на каналах `#git` и `#github` сервера Freenode IRC (irc.freenode.net). Обычно там сотни людей отлично знающих Git, которые могут помочь.

## Резюме ##

Теперь у вас должно быть общее понимание, что такое Git, и чем он отличается от ЦСУВ, которыми вы могли пользоваться раньше. Также у вас должна быть установлена рабочая версия Git с вашими личными настройками. Настало время перейти изучению некоторых основ Git.

